"""
Django settings for user_web_server project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-(64y5xx@-%d!=&4s6b8ex-k!$4wuyc-ku8p6sh3m+w&_ss@p$o'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# 允许的接收请求的主机：用户的请求到了这个server,Django会解析请求的host头，
# 要求host头必须是在下面的列表中，否则爆出异常 DisallowedHost
ALLOWED_HOSTS = [ # server部署机器的 IP
    'localhost', 
    '127.0.0.1',
    '192.168.0.102', 
    'a2.richudongfang1642.cn',
    '[::1]',          # IPv6 localhost
]


# Application definition

# 默认安装的app 都是Django提供的开箱即用的组件，非常方便
# 当你开发自己app模块时，也要添加到这里，才能呗Django感知到
INSTALLED_APPS = [
    'django.contrib.admin', #  提供 Django 自带的 后台管理界面
    'django.contrib.auth', #  用户认证系统
    'django.contrib.contenttypes', # 
    'django.contrib.sessions', # 会话管理
    'django.contrib.messages', # 消息框架
    'django.contrib.staticfiles', # 静态文件管理（CSS/JS/图片等）
    # 第三方auth模块，对支持用户认证支持非常完善
    'django.contrib.sites', # 因为django-allauth 需要使用site模型存储站点信息
    'allauth',
    'allauth.account',  # 这些app都是自带有自己的模板的，django都会自动导入
    'allauth.socialaccount',  #  requires install using `django-allauth[socialaccount]`.
    'allauth.socialaccount.providers.weixin', # include the providers you want to enable:
    
    ###我们自己的app(app_name.apps.AppLearnConfig[apps.py里的类名])
    'app_learn.apps.AppLearnConfig',
    'user.apps.UserConfig'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    
    "allauth.account.middleware.AccountMiddleware",
]

ROOT_URLCONF = 'user_web_server.urls'

SITE_ID = 1
LOGIN_REDIRECT_URL = '/'  # 登录成功后跳转的页面
# 指定要使用的登录方法(用户名、电子邮件地址两者之一) # username_email
ACCOUNT_AUTHENTICATION_METHOD = 'username'
# 要求用户注册时必须填写email
ACCOUNT_EMAIL_REQUIRED = False
ACCOUNT_USERNAME_REQUIRED = True

# 注册中邮件验证方法: "强制(mandatory)"、 "可选(optional)" 或 "否(none)" 之一 ,(注册成功后，会发送一封验证邮件，用户必须验证邮箱后，才能登陆)
ACCOUNT_EMAIL_VERIFICATION ="none"
ACCOUNT_EMAIL_CONFIRMATION_COOLDOWN = 180 # 邮箱验证的冷却时间，单位为秒，默认为 180 秒
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS =3 # 邮箱验证的过期时间，单位为天，默认为 3 天

AUTHENTICATION_BACKENDS = [
    # 用于 Admin 和原生认证
    'django.contrib.auth.backends.ModelBackend',

    # allauth 前台登录支持
    'allauth.account.auth_backends.AuthenticationBackend',
]

TEMPLATES = [  # 网站的模板配置
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'], # 全局 (公共)模板目录
        'APP_DIRS': True, #  Django 会自动去每个已注册 App 里找 templates/ 子目录
        'OPTIONS': {
            # Django 会在渲染任何模板前，依次调用这些函数，把它们返回的字典合并到你的上下文中
            # 这样你就能在模板里引用这些变量，例如 user,messages, request等常用的上下文变量
            'context_processors': [
                'django.template.context_processors.request', # `allauth` needs this from django
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# Provider specific settings
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        # For each OAuth based provider, either add a ``SocialApp``
        # (``socialaccount`` app) containing the required client
        # credentials, or list them here:
        'APP': {
            'client_id': '123',
            'secret': '456',
            'key': ''
        }
    }
}

WSGI_APPLICATION = 'user_web_server.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'
TIME_ZONE = 'Asia/Shanghai'  # 时区

USE_I18N = True
USE_L10N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
